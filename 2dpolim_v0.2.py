# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '2dpolim.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import serial
from serial import SerialException
from serial.tools import list_ports
from TLPM import TLPM
import ctypes
from ctypes import cdll,c_long, c_ulong, c_uint32,byref,create_string_buffer,c_bool,c_char_p,c_int,c_int16,c_double, sizeof, c_voidp
import time
import datetime 
import csv # import csv module
import matplotlib.pyplot as plt # import matplotlib module
import pandas as pd # import pandas module
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(900, 600)
        MainWindow.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(43, 43, 43);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(30, 30, 171, 121))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/newPrefix/logo.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(280, 20, 291, 61))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_title.setFont(font)
        self.label_title.setStyleSheet("\n"
"font: 16pt \"Arial\";\n"
"")
        self.label_title.setObjectName("label_title")
        self.Button_click = QtWidgets.QPushButton(self.centralwidget)
        self.Button_click.setGeometry(QtCore.QRect(630, 30, 61, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.Button_click.setFont(font)
        self.Button_click.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(255, 0, 0);")
        self.Button_click.setObjectName("Button_click")
        self.Button_click.clicked.connect(self.myClick)
        
        self.Button_close = QtWidgets.QPushButton(self.centralwidget)
        self.Button_close.setGeometry(QtCore.QRect(710, 30, 151, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.Button_close.setFont(font)
        self.Button_close.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(0, 0, 0);")
        self.Button_close.setObjectName("Button_close")
        self.Button_close.clicked.connect(self.closeSerialPort_Laser_Arduino)
        
        self.Button_demo = QtWidgets.QPushButton(self.centralwidget)
        self.Button_demo.setGeometry(QtCore.QRect(630, 70, 61, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.Button_demo.setFont(font)
        self.Button_demo.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"")
        self.Button_demo.setObjectName("Button_demo")
        self.Button_demo.clicked.connect(self.button_demo)
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(30, 180, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.line_select_power = QtWidgets.QLineEdit(self.centralwidget)
        self.line_select_power.setGeometry(QtCore.QRect(140, 180, 61, 20))
        self.line_select_power.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_select_power.setObjectName("line_select_power")
        self.combo_laser = QtWidgets.QComboBox(self.centralwidget)
        self.combo_laser.setGeometry(QtCore.QRect(210, 180, 121, 22))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.combo_laser.setFont(font)
        self.combo_laser.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.combo_laser.setObjectName("combo_laser")
        self.combo_laser.addItem("")
        self.combo_laser.addItem("")
        self.Button_arduino = QtWidgets.QPushButton(self.centralwidget)
        self.Button_arduino.setGeometry(QtCore.QRect(240, 110, 71, 51))
        self.Button_arduino.setAutoFillBackground(False)
        self.Button_arduino.setStyleSheet("font: 9pt \"Arial\";\n"
"background-color: rgb(0, 88, 0);")
        self.Button_arduino.setObjectName("Button_arduino")
        self.Button_arduino.clicked.connect(self.openSerialPort_Arduino)
        
        self.Button_laser = QtWidgets.QPushButton(self.centralwidget)
        self.Button_laser.setGeometry(QtCore.QRect(340, 110, 71, 51))
        self.Button_laser.setStyleSheet("font: 9pt \"Arial\";\n"
"background-color: rgb(0, 88, 0);")
        self.Button_laser.setObjectName("Button_laser")
        self.Button_laser.clicked.connect(self.openSerialPort_Laser)
        
        self.Button_pm = QtWidgets.QPushButton(self.centralwidget)
        self.Button_pm.setGeometry(QtCore.QRect(440, 110, 71, 51))
        self.Button_pm.setStyleSheet("font: 9pt \"Arial\";\n"
"font: 8pt \"Arial\";\n"
"background-color: rgb(0, 88, 0);")
        self.Button_pm.setObjectName("Button_pm")
        self.Button_pm.clicked.connect(self.connect_power_meter)
        
        self.Button_lc = QtWidgets.QPushButton(self.centralwidget)
        self.Button_lc.setGeometry(QtCore.QRect(540, 110, 71, 51))
        self.Button_lc.setStyleSheet("font: 9pt \"Arial\";\n"
"font: 8pt \"Arial\";\n"
"background-color: rgb(0, 88, 0);")
        self.Button_lc.setObjectName("Button_lc")
        self.Button_lc.clicked.connect(self.LCPortCheck)
        
        self.label_LC_status = QtWidgets.QLabel(self.centralwidget)
        self.label_LC_status.setGeometry(QtCore.QRect(640, 130, 61, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_LC_status.setFont(font)
        self.label_LC_status.setStyleSheet("font: 9pt \"Arial\";")
        self.label_LC_status.setObjectName("label_LC_status")
        
        self.Button_execute = QtWidgets.QPushButton(self.centralwidget)
        self.Button_execute.setGeometry(QtCore.QRect(340, 180, 61, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.Button_execute.setFont(font)
        self.Button_execute.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(255, 225, 55);")
        self.Button_execute.setObjectName("Button_execute")
        self.Button_execute.clicked.connect(self.laserPowerConfigButton)
        
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 220, 161, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(120, 270, 71, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lable_LED = QtWidgets.QLabel(self.centralwidget)
        self.lable_LED.setGeometry(QtCore.QRect(700, 130, 21, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.lable_LED.setFont(font)
        self.lable_LED.setStyleSheet("background-color: rgb(255, 0, 0)")
        self.lable_LED.setFrameShape(QtWidgets.QFrame.Box)
        self.lable_LED.setAlignment(QtCore.Qt.AlignCenter)
        self.lable_LED.setObjectName("lable_LED")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(30, 310, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.line_exposure = QtWidgets.QLineEdit(self.centralwidget)
        self.line_exposure.setGeometry(QtCore.QRect(190, 220, 51, 20))
        self.line_exposure.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_exposure.setFrame(True)
        self.line_exposure.setObjectName("line_exposure")
        self.line_repetition = QtWidgets.QLineEdit(self.centralwidget)
        self.line_repetition.setGeometry(QtCore.QRect(190, 270, 51, 20))
        self.line_repetition.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_repetition.setObjectName("line_repetition")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(30, 330, 521, 191))
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setObjectName("frame")
        self.wave = QtWidgets.QLabel(self.frame)
        self.wave.setGeometry(QtCore.QRect(10, 10, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.wave.setFont(font)
        self.wave.setFrameShape(QtWidgets.QFrame.Box)
        self.wave.setFrameShadow(QtWidgets.QFrame.Plain)
        self.wave.setAlignment(QtCore.Qt.AlignCenter)
        self.wave.setObjectName("wave")
        self.full_power = QtWidgets.QLabel(self.frame)
        self.full_power.setGeometry(QtCore.QRect(110, 10, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.full_power.setFont(font)
        self.full_power.setFrameShape(QtWidgets.QFrame.Box)
        self.full_power.setAlignment(QtCore.Qt.AlignCenter)
        self.full_power.setObjectName("full_power")
        self.modulate = QtWidgets.QLabel(self.frame)
        self.modulate.setGeometry(QtCore.QRect(420, 10, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.modulate.setFont(font)
        self.modulate.setFrameShape(QtWidgets.QFrame.Box)
        self.modulate.setAlignment(QtCore.Qt.AlignCenter)
        self.modulate.setObjectName("modulate")
        self.od = QtWidgets.QLabel(self.frame)
        self.od.setGeometry(QtCore.QRect(210, 10, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od.setFont(font)
        self.od.setFrameShape(QtWidgets.QFrame.Box)
        self.od.setAlignment(QtCore.Qt.AlignCenter)
        self.od.setObjectName("od")
        self.filter_power = QtWidgets.QLabel(self.frame)
        self.filter_power.setGeometry(QtCore.QRect(310, 10, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.filter_power.setFont(font)
        self.filter_power.setFrameShape(QtWidgets.QFrame.Box)
        self.filter_power.setAlignment(QtCore.Qt.AlignCenter)
        self.filter_power.setObjectName("filter_power")
        self.od_2 = QtWidgets.QLabel(self.frame)
        self.od_2.setGeometry(QtCore.QRect(110, 70, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od_2.setFont(font)
        self.od_2.setFrameShape(QtWidgets.QFrame.Box)
        self.od_2.setAlignment(QtCore.Qt.AlignCenter)
        self.od_2.setObjectName("od_2")
        self.od_3 = QtWidgets.QLabel(self.frame)
        self.od_3.setGeometry(QtCore.QRect(10, 70, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od_3.setFont(font)
        self.od_3.setFrameShape(QtWidgets.QFrame.Box)
        self.od_3.setAlignment(QtCore.Qt.AlignCenter)
        self.od_3.setObjectName("od_3")
        self.od_4 = QtWidgets.QLabel(self.frame)
        self.od_4.setGeometry(QtCore.QRect(210, 70, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od_4.setFont(font)
        self.od_4.setFrameShape(QtWidgets.QFrame.Box)
        self.od_4.setAlignment(QtCore.Qt.AlignCenter)
        self.od_4.setObjectName("od_4")
        self.od_5 = QtWidgets.QLabel(self.frame)
        self.od_5.setGeometry(QtCore.QRect(420, 70, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od_5.setFont(font)
        self.od_5.setFrameShape(QtWidgets.QFrame.Box)
        self.od_5.setAlignment(QtCore.Qt.AlignCenter)
        self.od_5.setObjectName("od_5")
        self.od_6 = QtWidgets.QLabel(self.frame)
        self.od_6.setGeometry(QtCore.QRect(10, 130, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od_6.setFont(font)
        self.od_6.setFrameShape(QtWidgets.QFrame.Box)
        self.od_6.setAlignment(QtCore.Qt.AlignCenter)
        self.od_6.setObjectName("od_6")
        self.od_7 = QtWidgets.QLabel(self.frame)
        self.od_7.setGeometry(QtCore.QRect(310, 70, 101, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.od_7.setFont(font)
        self.od_7.setFrameShape(QtWidgets.QFrame.Box)
        self.od_7.setAlignment(QtCore.Qt.AlignCenter)
        self.od_7.setObjectName("od_7")
        self.line_wave = QtWidgets.QLineEdit(self.frame)
        self.line_wave.setGeometry(QtCore.QRect(10, 40, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_wave.setFont(font)
        self.line_wave.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_wave.setAlignment(QtCore.Qt.AlignCenter)
        self.line_wave.setObjectName("line_wave")
        self.line_fullpower = QtWidgets.QLineEdit(self.frame)
        self.line_fullpower.setGeometry(QtCore.QRect(110, 40, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_fullpower.setFont(font)
        self.line_fullpower.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_fullpower.setAlignment(QtCore.Qt.AlignCenter)
        self.line_fullpower.setObjectName("line_fullpower")
        self.line_od = QtWidgets.QLineEdit(self.frame)
        self.line_od.setGeometry(QtCore.QRect(210, 40, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_od.setFont(font)
        self.line_od.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_od.setAlignment(QtCore.Qt.AlignCenter)
        self.line_od.setObjectName("line_od")
        self.line_powerfilter = QtWidgets.QLineEdit(self.frame)
        self.line_powerfilter.setGeometry(QtCore.QRect(310, 40, 101, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_powerfilter.setFont(font)
        self.line_powerfilter.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_powerfilter.setAlignment(QtCore.Qt.AlignCenter)
        self.line_powerfilter.setObjectName("line_powerfilter")
        self.line_md = QtWidgets.QLineEdit(self.frame)
        self.line_md.setGeometry(QtCore.QRect(420, 40, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_md.setFont(font)
        self.line_md.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_md.setAlignment(QtCore.Qt.AlignCenter)
        self.line_md.setObjectName("line_md")
        self.line_obj = QtWidgets.QLineEdit(self.frame)
        self.line_obj.setGeometry(QtCore.QRect(10, 100, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_obj.setFont(font)
        self.line_obj.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_obj.setAlignment(QtCore.Qt.AlignCenter)
        self.line_obj.setObjectName("line_obj")
        self.line_na = QtWidgets.QLineEdit(self.frame)
        self.line_na.setGeometry(QtCore.QRect(110, 100, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_na.setFont(font)
        self.line_na.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_na.setAlignment(QtCore.Qt.AlignCenter)
        self.line_na.setObjectName("line_na")
        self.line_gain = QtWidgets.QLineEdit(self.frame)
        self.line_gain.setGeometry(QtCore.QRect(210, 100, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_gain.setFont(font)
        self.line_gain.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_gain.setAlignment(QtCore.Qt.AlignCenter)
        self.line_gain.setObjectName("line_gain")
        self.line_offset = QtWidgets.QLineEdit(self.frame)
        self.line_offset.setGeometry(QtCore.QRect(310, 100, 101, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_offset.setFont(font)
        self.line_offset.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_offset.setAlignment(QtCore.Qt.AlignCenter)
        self.line_offset.setObjectName("line_offset")
        self.line_phase = QtWidgets.QLineEdit(self.frame)
        self.line_phase.setGeometry(QtCore.QRect(420, 100, 91, 20))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.line_phase.setFont(font)
        self.line_phase.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_phase.setAlignment(QtCore.Qt.AlignCenter)
        self.line_phase.setObjectName("line_phase")
        self.line_usernote = QtWidgets.QLineEdit(self.frame)
        self.line_usernote.setGeometry(QtCore.QRect(10, 160, 501, 20))
        self.line_usernote.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.line_usernote.setObjectName("line_usernote")
        self.Button_read = QtWidgets.QPushButton(self.centralwidget)
        self.Button_read.setGeometry(QtCore.QRect(250, 210, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.Button_read.setFont(font)
        self.Button_read.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(0, 189, 189);")
        self.Button_read.setObjectName("Button_read")
        self.Button_read.clicked.connect(self.getArduinoConfig)
        
        self.Button_set = QtWidgets.QPushButton(self.centralwidget)
        self.Button_set.setGeometry(QtCore.QRect(250, 260, 81, 41))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.Button_set.setFont(font)
        self.Button_set.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(255, 0, 0);")
        self.Button_set.setObjectName("Button_set")
        self.Button_set.clicked.connect(self.setArduinoConfig)
        
        self.Button_on = QtWidgets.QPushButton(self.centralwidget)
        self.Button_on.setGeometry(QtCore.QRect(410, 180, 61, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.Button_on.setFont(font)
        self.Button_on.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(180, 0, 0);")
        self.Button_on.setObjectName("Button_on")
        self.Button_on.clicked.connect(self.laserTriggerOn)
        
        self.Button_off = QtWidgets.QPushButton(self.centralwidget)
        self.Button_off.setGeometry(QtCore.QRect(480, 180, 61, 23))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.Button_off.setFont(font)
        self.Button_off.setStyleSheet("background-color: rgb(125, 125, 125);\n"
"color: rgb(0, 170, 0);")
        self.Button_off.setObjectName("Button_off")
        self.Button_off.clicked.connect(self.laserTriggerOff)
        
        self.Button_start = QtWidgets.QPushButton(self.centralwidget)
        self.Button_start.setGeometry(QtCore.QRect(390, 230, 101, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Button_start.setFont(font)
        self.Button_start.setStyleSheet("background-color: rgb(255, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.Button_start.setObjectName("Button_start")
        self.Button_start.clicked.connect(self.PyArduinoCMD_acqm)
        
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(560, 180, 181, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(560, 200, 311, 71))
        self.frame_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.frame_2.setAutoFillBackground(False)
        self.frame_2.setStyleSheet("gridline-color: rgb(0, 0, 0);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setObjectName("frame_2")
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setGeometry(QtCore.QRect(10, 10, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_9.setFont(font)
        self.label_9.setFrameShape(QtWidgets.QFrame.Box)
        self.label_9.setTextFormat(QtCore.Qt.AutoText)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(60, 10, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_10.setFont(font)
        self.label_10.setFrameShape(QtWidgets.QFrame.Box)
        self.label_10.setTextFormat(QtCore.Qt.AutoText)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setGeometry(QtCore.QRect(110, 10, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_11.setFont(font)
        self.label_11.setFrameShape(QtWidgets.QFrame.Box)
        self.label_11.setTextFormat(QtCore.Qt.AutoText)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.frame_2)
        self.label_12.setGeometry(QtCore.QRect(160, 10, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_12.setFont(font)
        self.label_12.setFrameShape(QtWidgets.QFrame.Box)
        self.label_12.setTextFormat(QtCore.Qt.AutoText)
        self.label_12.setAlignment(QtCore.Qt.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.frame_2)
        self.label_13.setGeometry(QtCore.QRect(260, 10, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_13.setFont(font)
        self.label_13.setFrameShape(QtWidgets.QFrame.Box)
        self.label_13.setTextFormat(QtCore.Qt.AutoText)
        self.label_13.setAlignment(QtCore.Qt.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.frame_2)
        self.label_14.setGeometry(QtCore.QRect(210, 10, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_14.setFont(font)
        self.label_14.setFrameShape(QtWidgets.QFrame.Box)
        self.label_14.setTextFormat(QtCore.Qt.AutoText)
        self.label_14.setAlignment(QtCore.Qt.AlignCenter)
        self.label_14.setObjectName("label_14")
        self.label_angle_0 = QtWidgets.QLabel(self.frame_2)
        self.label_angle_0.setGeometry(QtCore.QRect(10, 40, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_angle_0.setFont(font)
        self.label_angle_0.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.label_angle_0.setFrameShape(QtWidgets.QFrame.Box)
        self.label_angle_0.setAlignment(QtCore.Qt.AlignCenter)
        self.label_angle_0.setObjectName("label_angle_0")
        
        self.label_angle_30 = QtWidgets.QLabel(self.frame_2)
        self.label_angle_30.setGeometry(QtCore.QRect(60, 40, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_angle_30.setFont(font)
        self.label_angle_30.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.label_angle_30.setFrameShape(QtWidgets.QFrame.Box)
        self.label_angle_30.setAlignment(QtCore.Qt.AlignCenter)
        self.label_angle_30.setObjectName("label_angle_30")
        
        self.label_angle_60 = QtWidgets.QLabel(self.frame_2)
        self.label_angle_60.setGeometry(QtCore.QRect(110, 40, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_angle_60.setFont(font)
        self.label_angle_60.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.label_angle_60.setFrameShape(QtWidgets.QFrame.Box)
        self.label_angle_60.setAlignment(QtCore.Qt.AlignCenter)
        self.label_angle_60.setObjectName("label_angle_60")
        
        self.label_angle_90 = QtWidgets.QLabel(self.frame_2)
        self.label_angle_90.setGeometry(QtCore.QRect(160, 40, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_angle_90.setFont(font)
        self.label_angle_90.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.label_angle_90.setFrameShape(QtWidgets.QFrame.Box)
        self.label_angle_90.setAlignment(QtCore.Qt.AlignCenter)
        self.label_angle_90.setObjectName("label_angle_90")
        
        self.label_angle_120 = QtWidgets.QLabel(self.frame_2)
        self.label_angle_120.setGeometry(QtCore.QRect(210, 40, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_angle_120.setFont(font)
        self.label_angle_120.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.label_angle_120.setFrameShape(QtWidgets.QFrame.Box)
        self.label_angle_120.setAlignment(QtCore.Qt.AlignCenter)
        self.label_angle_120.setObjectName("label_angle_120")
        
        self.label_angle_150 = QtWidgets.QLabel(self.frame_2)
        self.label_angle_150.setGeometry(QtCore.QRect(260, 40, 41, 21))
        font = QtGui.QFont()
        font.setFamily("Arial")
        self.label_angle_150.setFont(font)
        self.label_angle_150.setStyleSheet("background-color: rgb(67, 67, 67);")
        self.label_angle_150.setFrameShape(QtWidgets.QFrame.Box)
        self.label_angle_150.setAlignment(QtCore.Qt.AlignCenter)
        self.label_angle_150.setObjectName("label_angle_150")
        
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(560, 320, 311, 201))
        self.textBrowser.setObjectName("textBrowser")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(560, 300, 101, 16))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 900, 22))
        self.menubar.setObjectName("menubar")
        self.menu2D_POLIM_Software = QtWidgets.QMenu(self.menubar)
        self.menu2D_POLIM_Software.setObjectName("menu2D_POLIM_Software")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menu2D_POLIM_Software.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_title.setText(_translate("MainWindow", "2DPOLIM Acquisition Software\n"
"      by Yutong & Yunhao"))
        self.Button_click.setText(_translate("MainWindow", "Click me!"))
        self.Button_close.setText(_translate("MainWindow", "Close All Series Ports"))
        self.Button_demo.setText(_translate("MainWindow", "Demo"))
        self.label_3.setText(_translate("MainWindow", "Laser power in mW:"))
        self.line_select_power.setPlaceholderText(_translate("MainWindow", "Select..."))
        self.combo_laser.setItemText(0, _translate("MainWindow", "Read Laser Power"))
        self.combo_laser.setItemText(1, _translate("MainWindow", "Set Laser Power"))
        self.Button_arduino.setText(_translate("MainWindow", "Connect to\n"
" Arduino"))
        self.Button_laser.setText(_translate("MainWindow", "Connect to\n"
" Laser"))
        self.Button_pm.setText(_translate("MainWindow", "Connect to\n"
"Power Meter"))
        self.Button_lc.setText(_translate("MainWindow", "Check\n"
"LC Ports"))
        self.label_LC_status.setText(_translate("MainWindow", "LC Status:"))
        self.Button_execute.setText(_translate("MainWindow", "Execute"))
        self.label_5.setText(_translate("MainWindow", "Exposure Pulse Width [ms] ="))
        self.label_6.setText(_translate("MainWindow", "Repetition ="))
        self.lable_LED.setText(_translate("MainWindow", ""))
        self.label_7.setText(_translate("MainWindow", "Header information :"))
        self.wave.setText(_translate("MainWindow", "Wavelength[nm]"))
        self.full_power.setText(_translate("MainWindow", "Full ExPower[mW]"))
        self.modulate.setText(_translate("MainWindow", "Iso MD"))
        self.od.setText(_translate("MainWindow", "OD"))
        self.filter_power.setText(_translate("MainWindow", "ExPower Filter[mW]"))
        self.od_2.setText(_translate("MainWindow", "NA"))
        self.od_3.setText(_translate("MainWindow", "Objective"))
        self.od_4.setText(_translate("MainWindow", "Real Gain"))
        self.od_5.setText(_translate("MainWindow", "Iso Phase"))
        self.od_6.setText(_translate("MainWindow", "User note :"))
        self.od_7.setText(_translate("MainWindow", "Off set[degree]"))
        self.line_wave.setText(_translate("MainWindow", "NaN"))
        self.line_fullpower.setText(_translate("MainWindow", "NaN"))
        self.line_od.setText(_translate("MainWindow", "NaN"))
        self.line_powerfilter.setText(_translate("MainWindow", "NaN"))
        self.line_md.setText(_translate("MainWindow", "NaN"))
        self.line_obj.setText(_translate("MainWindow", "NaN"))
        self.line_na.setText(_translate("MainWindow", "NaN"))
        self.line_gain.setText(_translate("MainWindow", "NaN"))
        self.line_offset.setText(_translate("MainWindow", "NaN"))
        self.line_phase.setText(_translate("MainWindow", "NaN"))
        self.Button_read.setText(_translate("MainWindow", "Read\n"
"Trigger Config."))
        self.Button_set.setText(_translate("MainWindow", "Set\n"
"Trigger Config."))
        self.Button_on.setText(_translate("MainWindow", "Laser ON"))
        self.Button_off.setText(_translate("MainWindow", "Laser OFF"))
        self.Button_start.setText(_translate("MainWindow", "Start\n"
"Acquisition!"))
        self.label_8.setText(_translate("MainWindow", "Power Meter [mW]:"))
        self.label_9.setText(_translate("MainWindow", "0"))
        self.label_10.setText(_translate("MainWindow", "30"))
        self.label_11.setText(_translate("MainWindow", "60"))
        self.label_12.setText(_translate("MainWindow", "90"))
        self.label_13.setText(_translate("MainWindow", "150"))
        self.label_14.setText(_translate("MainWindow", "120"))
        self.label_angle_0.setText(_translate("MainWindow", "0.00"))
        self.label_angle_30.setText(_translate("MainWindow", "0.00"))
        self.label_angle_150.setText(_translate("MainWindow", "0.00"))
        self.label_angle_120.setText(_translate("MainWindow", "0.00"))
        self.label_angle_90.setText(_translate("MainWindow", "0.00"))
        self.label_angle_60.setText(_translate("MainWindow", "0.00"))
        self.label_15.setText(_translate("MainWindow", "Output :"))
        self.menu2D_POLIM_Software.setTitle(_translate("MainWindow", "2D POLIM Software"))
    
    def myClick(self):
        # text for showing
        instructionTxt = """1. firstly click ‘Connect to Arduino’. If successful, click ‘Read Trigger Config’ to modify trigger parameters if necessary.
2. usually, only change ‘# of Repetition’ and ‘Exposure Pulse Width’. Don’t change the other settings unless you know what you’re doing. Click ‘Set Trigger Config’ to save changes.
3. (optional, connect to Laser is NOT necessary for acquisition) ‘Connect to Laser’ for setting/reading Laser Power. Select option in the combobox and click ‘Execute’
4. click ‘Check LC port’ to check connection of LC rotator.
5. once the Arduino and LC are correctly connected, ‘Start Acquisition’, ‘Start Infinite Trigger Mode’ buttons are available. 
6. set cameras into External Trigger Mode and start recording. Click ‘Start Acquisition’.
"""
        
        self.textBrowser.append(instructionTxt + '\n')
       
        print(instructionTxt)   
        
    demo_flag = False
    laserConnect_flag = False
    arduinoConnect_flag = False
    LCPortCheck_flag = False
    
        
    def button_demo(self):
        global demo_flag, laserConnect_flag, arduinoConnect_flag, LCPortCheck_flag
        # Switch on each click 
        if self.demo_flag == False:
            self.demo_flag = True
        else:
            self.demo_flag = False
      
        if self.demo_flag == True: # ON state
            self.Button_demo.setText("Switch OFF") # re-set the shown text on the button
            #demo_text = "[Demo] Hello! I'm ON."
            # Change the text and style of label widget:
            self.textBrowser.append("[Demo] Hello! I'm ON.")
            #self.myLabel0.setStyleSheet("background-color: yellow; color: red")
        
            # Virtually switch ON Laser & Arduino & LC (set the flag to ON state)
            self.laserConnect_flag = True # Enable Laser buttons:
            self.arduinoConnect_flag = True
            self.LCPortCheck_flag = True
        else:
            self.Button_demo.setText("Switch ON")
        
            # Change the text and style of label widget:
            self.textBrowser.append("[Demo] I'm OFF. Bye bye!")
            #self.myLabel0.setStyleSheet("background-color: green; color: yellow")
            # Virtually switch OFF Laser & Arduino & LC (set the flag to OFF state)
            self.laserConnect_flag = False # Disable Laser buttons:        
            self.arduinoConnect_flag = False
            self.LCPortCheck_flag = False
        # Refresh the button state
        self.buttonStateRefresh()
        #self.textBrowser.append('end', demo_text + '\n')
        
    # Declare global variables
    arduino_Serial = None
    laser488_Serial = None
    def openSerialPort(self, dev="None"):
        '''

        Parameters
        ----------
        dev : TYPE: string, optional
            DESCRIPTION. The default is "None". 
                         "arduino": open the serial port of arduino if found.
                         "laser": open the serial port of laser if found.

        Returns
        -------
        list [COM port number of Arduino, COM port number of Cobolt 06-MLD 488nm Laser]
            DESCRIPTION. A list of COM port number of Arduino and Cobolt 06-MLD 488nm Laser if they are found. Otherwise, return a list element of empty string ''.

        '''
        # First, enumerate and search ports of both Arduino and Laser
        devicesFoundList = list_ports.comports()  #list_ports.comports() returns a list of ListPortInfo objects. Use list_ports.comports()[0] to access the object
        portNoArduino=''
        portNoLaser=''
        if devicesFoundList!=[]:
            for device in devicesFoundList:
                # device = devicesFoundList[0]
                if ("Arduino Uno" in device.description) or ("Arduino Due" in device.description):
                    portNoArduino = device.device
                    print("Found Arduino at port:",portNoArduino)
                    self.textBrowser.append("Found Arduino at port:",portNoArduino)
                    # TBOX_MN_print("Found Arduino at port:",portNoArduino)
                
                if ("VID:PID=25DC:0006" in device.hwid):
                    portNoLaser = device.device
                    print("Found Cobolt 06-MLD 488nm Laser at port:", portNoLaser)
                    self.textBrowser.append("Found Cobolt 06-MLD 488nm Laser at port:", portNoLaser)
        # Second, connect to the port specified by the function argument  
        if dev == "None":
            pass # By default: Only returns port number of found devices, without connecting to the devices.
        elif dev == "arduino":
            global arduino_Serial, arduinoConnect_flag, laserConnect_flag
            open_flag=False
            try: open_flag = arduino_Serial.is_open # Check open state in order to Skip if the port is already opened to avoid PermissionError(13, 'Access is denied.', None, 5)
            except:
                pass
            # print(open_flag)
            
            if (portNoArduino !='' and open_flag==False):
                try:
                    self.arduino_Serial = serial.Serial(portNoArduino, baudrate=115200, timeout=1)
                    print("Connect to Arduino at port:",portNoArduino)
                    self.textBrowser.append("Connect to Arduino at port:",portNoArduino)
                    arduinoConnect_flag = True # assign True state to the arduino connection flag
                except Exception as error:
                    raise SerialException (f'{portNoArduino} not accesible. Error: {error}')
                    arduinoConnect_flag = False
            elif open_flag==True:
                print("Arduino is already opened at port:",portNoArduino)
                self.textBrowser.append("Arduino is already opened at port:",portNoArduino)
                arduinoConnect_flag = True
            else:
                try: self.arduino_Serial.__del__() # try to close the port if it is still hooked.
                except:
                    pass
                print("No Arduino Devices Present.")
                self.textBrowser.append("No Arduino Devices Present.")
                arduinoConnect_flag = False

        elif dev == "laser":
            global laser488_Serial
            open_flag=False
            try: open_flag = self.laser488_Serial.is_open # Check open state in order to Skip if the port is already opened to avoid PermissionError(13, 'Access is denied.', None, 5)
            except:
                pass
            # print(open_flag)
            
            if (portNoLaser !='' and open_flag==False):
                try:
                    self.laser488_Serial = serial.Serial(portNoLaser, baudrate=115200, timeout=1)
                    print("Connect to Cobolt 06-MLD 488nm Laser at port:", portNoLaser)
                    self.textBrowser.append("Connect to Cobolt 06-MLD 488nm Laser at port:", portNoLaser)
                    laserConnect_flag = True # assign True state to the laser connection flag
                except Exception as error:
                    raise SerialException (f'{portNoLaser} not accesible. Error: {error}')
                    laserConnect_flag = False
            elif open_flag==True:
                print("Cobolt 06-MLD 488nm Laseris already opened at port:",portNoLaser)
                self.textBrowser.append("Cobolt 06-MLD 488nm Laseris already opened at port:",portNoLaser)
                laserConnect_flag = True
            else:
                try: self.laser488_Serial.__del__() # try to close the port if it is still hooked.
                except:
                    pass
                print("No Cobolt 06-MLD 488nm Laser Presents.")
                self.textBrowser.append("No Cobolt 06-MLD 488nm Laser Presents.")
                laserConnect_flag = False
        else:
            print("Wrong function argument.")
            # TBOX_MN_print("Wrong function argument.")
            
        
        # Last, return port of devices for further use
        return [portNoArduino, portNoLaser]
    
    def openSerialPort_Arduino(self, dev="None"):
        self.textBrowser.append("Open Arduino's Serial Port...")
        self.openSerialPort("arduino")
        print("CNSL: openSerialPort_Arduino")
        # text_response = str(openSerialPort("arduino"))
        # show text in main text box
        # main_text_box.insert('end', text_response +'\n') # show text by inserting
        # Refresh the button state
        self.buttonStateRefresh()

    def openSerialPort_Laser(self,dev="None"):
        self.textBrowser.append("Open Laser's Serial Port...")
        self.openSerialPort("laser")
        print("CNSL: openSerialPort_Laser")
        # text_response = str(openSerialPort("laser"))
        # # show text in main text box
        # main_text_box.insert('end', text_response +'\n') # show text by inserting
        # Refresh the button state
        self.buttonStateRefresh()
        
    def closeSerialPort_Laser_Arduino(self, dev="None"):
        self.textBrowser.append("Close Serial Port of Laser & Arduino...")
        print("CNSL: closeSerialPort_Laser and Arduino")
        
        global arduinoConnect_flag, laserConnect_flag

        try:
            self.arduino_Serial.__del__()
            print("Arduino is disconnected!")
            self.textBrowser.append("Arduino is disconnected!")
            arduinoConnect_flag = False
        except:
            pass
            print("Error in disconnecting Arduino!")
            self.textBrowser.append("Error in disconnecting Arduino!")
            
        try:
            self.laser488_Serial.__del__()
            print("Laser is disconnected!")
            self.textBrowser.append("Laser is disconnected!")
            laserConnect_flag = False
        except:
            pass
            print("Error in disconnecting Laser!")
            self.textBrowser.append("Error in disconnecting Laser!")
        try:
            self.tlPM.close();
            print("Powermeter is disconnected!")
            self.textBrowser.append("Powermeter is disconnected")
        except:
            print("Error in closing Powermeter!")
            self.textBrowser.append("Error in closing Powermeter!")
        # Refresh the button state
        self.buttonStateRefresh()
        
    tlPM = TLPM()
    # Define a function to check and connect to power meter.
    def connect_power_meter(self):
        global pm # use a global variable to store the power meter object
        pm = None # initialize the pm variable to None
        # Check if power meter is already connected.
        if pm is not None:
            print('Power meter is already connected!')
            self.textBrowser.append("Error: Power meter is already connected!")
            return None
        # Find connected power meter devices.
        tlPM = TLPM()
        deviceCount = c_uint32()
        try:
            tlPM.findRsrc(byref(deviceCount))
        except:
            print('Error: Failed to find resources.')
            self.textBrowser.append("Error: Failed to find resources.")
            return None

        # Check if any device is found.
        if deviceCount.value == 0:
            print('None power meter were found.')
            self.textBrowser.append("None power meter were found.")
            return None
        else:
            print("Number of found devices: " + str(deviceCount.value))
            #self.textBrowser.append("Number of found devices: " + str(deviceCount.value))
            print("")

        resourceName = create_string_buffer(1024)

        for i in range(0, deviceCount.value):
            tlPM.getRsrcName(c_int(i), resourceName)
            print("Resource name of power meter", i, ":", c_char_p(resourceName.raw).value)
            #self.textBrowser.append("Resource name of power meter", i, ":", c_char_p(resourceName.raw).value)
        print("")
        tlPM.close()

        # Connect to last device.
        
        try:
            tlPM.open(resourceName, c_bool(True), c_bool(True))
        except:
            print('Error: Failed to open connection.')
            self.textBrowser.append("Error: Failed to open connection.")
            return None

        message = create_string_buffer(1024)
        tlPM.getCalibrationMsg(message)
        print("Connected to power meter", i)
        self.textBrowser.append("Connected to power meter", i)
        print("Last calibration date of power meter: ",c_char_p(message.raw).value)
        # self.textBrowser.append("Last calibration date of power meter: ",c_char_p(message.raw).value)
        print("")
        self.buttonStateRefresh()

        # Return the connected power meter object.
        return tlPM
    
    
    ### Define a function to sending ASCII command to LC controller (via calling LC_CMD_DLL.LCCMD in c-program)
    def PyLCCMD(self, cmd):
        # LC_CMD_DLL = ctypes.WinDLL(r"D:\MyDocs\PROG\VS\source\repos\LC_CMD_DLL\x64\Debug\LC_CMD_DLL.dll")
        #LC_CMD_DLL = ctypes.CDLL(r"D:\MyDocs\PROG\VS\source\repos\LC_CMD_DLL\x64\Debug\LC_CMD_DLL.dll") 
        LC_CMD_DLL = ctypes.CDLL(r"C:\Users\54112\Desktop\data\master thesis\runSetupCode\LC Polarization Rotator\LC_CMD_DLL.dll") #Laptop
        #LC_CMD_DLL = ctypes.CDLL(r"F:\Thesis\code\LC Polarization Rotator\LC_CMD_DLL.dll")
        #LC_CMD_DLL = ctypes.CDLL(r"D:\2DPOLIM\Setup\codes\LC_D5020_DLL\LC_CMD_DLL.dll")  # (Lab PC) locate the folder where the dll files are stored.

        # Acquire the function signature of C function: "char* LCCMD(char* lcCmdStr)" in LC_CMD_DLL.dll
        CppLCCMD = LC_CMD_DLL.LCCMD 

        ### Define ctypes data types of argument & return value in advance @ 2022.07.07

        # ctypes.c_char_p related to char * (NUL terminated) in C and bytes object or None in Python
        CppLCCMD.argtypes = [ctypes.c_char_p] #Assign a tuple of ctypes types to specify the argument types that the function accepts.
        CppLCCMD.restype = ctypes.c_char_p #Assign a ctypes type to specify the result type of the foreign function. 
        """
        Input: cmd - a string of ASCII command. e.g. "ver:?"

        Returns: a string of response from LC controller

        """
        print("Send command:",cmd)
        
        # Encode the string to bytes which is C-acceptable. i.e. "ver:?" to b"ver:?"
        cmd = cmd.encode() 
        
        # Send arguement cmd to function "char* LCCMD(char* lcCmdStr)" in c-program, and convert returned bytes to string
        LCResp = CppLCCMD(ctypes.c_char_p(cmd)).decode("utf-8")
        
        print("LC returns:",LCResp)
        
        return LCResp
    
    def LCPortCheck(self):
        # Do LC port check by sending a command
        global LCPortCheck_flag
        
        #Description: Query firmware version. Controller returns firmware version and copyright string.This is used to test communication with the PC.
        LCDataStr = self.PyLCCMD("ver:?")    # if connected, returns 'ver:1.05 (c) 2013-2020 Meadowlark Optics,Inc.'
        if ('ver:' in LCDataStr):
            LCPortCheck_flag = True
            print("LC communication test: PASS.")
            self.textBrowser.append("LC communication test: PASS.")
        else:
            LCPortCheck_flag = False
            print("LC communication test: FAIL.")
            self.textBrowser.append("LC communication test: FAIL.")
        
        # Show the port test result 
        if LCPortCheck_flag == True or demo_flag == True:  # demo_flag == True is just for demo. when without LC at around.
            self.lable_LED.setStyleSheet("background-color: green")
            LCPortCheck_flag = True
        else:
            self.lable_LED.setStyleSheet("background-color: red")
        
        # Refresh the button state
        self.buttonStateRefresh()

    def PyLaserCMD(self, laserCMD):
        """
        Input: laserCMD - a string of ASCII command according to the laser manual: D0136-Laser_Manual-Cobolt-06-01-Series_January_2020.pdf. e.g. "gsn?" Get serial number

        Returns: Returned value from Cobolt 06-MLD 488nm Laser read from serial.

        """
        print("Send command to laser:",laserCMD)

        laserCMD += '\r\n'  # add termination: carriage return & new line
        
        # Send arguement cmd to 
        try:
            self.laser488_Serial.write( laserCMD.encode('ascii') ) # encode('ascii') converts python string to a binary ascii representation
        except:
            print("Writing Error at serial port of laser!")
            response = None
            return response
            
        # Read Serial Port for laser's response       
        try:
            response = self.laser488_Serial.readline().decode('ascii').strip('\r\n') # convert bytes to string and remove ending '\r\n'
        except:
            response = None
        
        print("Laser returns:",response)
        return response
    
    def laserPowerConfigButton(self):
        # .get() to obtain value of combobox selection
        cmbox = self.combo_laser.currentText()
        print(cmbox," ", type(cmbox))

        if cmbox == "Read Laser Power":
            try:
                laserPower = self.PyLaserCMD("glmp?") ## "glmp?" Get laser modulation power set point. Return: str(Float) (mW)
            except: 
                print("Error: something wrong during getting Power Setting from Cobolt Laser.")
                self.textBrowser.append("Error: something wrong during getting Power Setting from Cobolt Laser.")
                
            # Assign value to input box: laserPowerConfig_Entry
            self.line_select_power.setText(laserPower)
            print("Read Laser Power: ", laserPower, "mW")
            self.textBrowser.append("Read Laser Power: ", laserPower, "mW")
            
        elif cmbox == "Set Laser Power":
            ### Assign laser power of modulation mode to Cobolt laser
            # First, Get value from input boxe: laserPowerConfig_Entry, and convert to float
            try:
                laserPower_Set = float(self.laserPowerConfig_Entry.get())
            except: 
                print("Error: something wrong during getting values from input box.")
                self.textBrowser.append("Error: something wrong during getting values from input box.")
            print(laserPower_Set)
            
            # Second, set power to Cobolt laser by cmd
            # print("slmp {}".format(laserPower_Set))
            laserPower_Set_IsOK = self.PyLaserCMD("slmp {}".format(laserPower_Set)) # Set laser modulation power to xx mW
            
            if laserPower_Set_IsOK == "OK":
                print("Set Laser Power to: ", laserPower_Set, "mW")
                self.textBrowser.append("Set Laser Power to: ", laserPower_Set, "mW")
            else:
                print("Error: something wrong during setting Power to Cobolt Laser.")
                self.textBrowser.append("Error: something wrong during setting Power to Cobolt Laser.")
                
    def readArduino(self):
        arduinoDataPacket_list=[]
        # global running # refer to global variable 'running' inside function
        while True: # or use flag: (running==True)
            
            while (arduino_Serial.in_waiting!=0):
                arduinoDataPacket = str(self.arduino_Serial.readline(),'utf-8').strip('\r\n')
                arduinoDataPacket_list.append(arduinoDataPacket)
                # if(arduinoDataPacket==".-.-."): # Morse code for "End of transmission/New page"
                if(arduinoDataPacket=="Arduino is ready. SEND Command to start triggering..."):
                    # return # terminate the function
                    return arduinoDataPacket_list
                print(arduinoDataPacket)
                self.textBrowser.append(arduinoDataPacket)

    # Define a function for calling Arduino with command
    def PyArduinoCMD(self, arduCMD, if_return = False):
        """
        Input: arduCMD - a string of ASCII command. e.g. "acqm"

        Returns: if_return = False, no return (return None). Otherwise returns the list from readArduino()

        """
        print("Send command to Arduino:",arduCMD)

        arduCMD = arduCMD + '\r'  # add termination carriage return
        
        # Send arguement cmd to 
        self.arduino_Serial.write(arduCMD.encode())
        
        # Go into Serial Port Reading loop for reading response       
        arduinoDataPacket_list = self.readArduino()
        
        # Return response from Arduino if is asked
        if if_return == True:
            return arduinoDataPacket_list
    
    def laserTriggerOn(self):
        self.PyArduinoCMD("cwm1")
        print("CNSL: Laser is ON! (CW mode)")
        self.textBrowser.append("Laser is ON! (CW mode)")
    
    def laserTriggerOff(self):
        self.PyArduinoCMD("cwm0")
        print("CNSL: Laser is OFF! (CW mode)")
        self.textBrowser.append("Laser is OFF! (CW mode)")
        
    def getArduinoConfig(self):
        CurrentArduinoConfigList = self.PyArduinoCMD("parm?", if_return = True)
        
        # Readout numScan(# of Repetition):
        findSub = "# of Repetition(var:numScan) = "
        # locate substring in the list
        numScanVal = [i for i in CurrentArduinoConfigList if findSub in i] #RTN:['numScan = 5']
        # Retrive the value of config. and convert it into int
        numScanVal = int(numScanVal[0].split("= ")[-1])
        print(numScanVal)
        # Assign value to input box
        self.line_repetition.setText(str(numScanVal))
        
        
        # Readout triggerPulseWidthMain(Exposure Pulse Width):
        findSub = "Exposure Pulse Width(var:triggerPulseWidthMain) = "
        triggerPulseWidthMainVal = [i for i in CurrentArduinoConfigList if findSub in i]
        triggerPulseWidthMainVal = int(triggerPulseWidthMainVal[0].split("= ")[-1][:-2]) # '5ms': [:-2] for removing 'ms'
        print(triggerPulseWidthMainVal)
        # Assign value to input box
        self.line_exposure.setText(str(triggerPulseWidthMainVal))
        
            
        return [numScanVal, triggerPulseWidthMainVal]

    def setArduinoConfig(self):
        ### Assign new values of config. to Arduino
        # First, Get value from input boxes and convert to int
        try:
            numScanVal = int(self.line_repetition.text())
            triggerPulseWidthMainVal = int(self.line_exposure.text())
        except ValueError:
            print("Error: check if any character other than numbers is in the input box.")
            self.textBrowser.append("Error: check if any character other than numbers is in the input box.")
        except: 
            print("Error: something wrong during getting values from input boxes.")
            self.textBrowser.append("Error: something wrong during getting values from input boxes.")
        
        # Then, assign the values to Arduino
        
        try:
            # Assign 1 numScan:
            # numScanVal = 5
            # send it to Arduino
            self.PyArduinoCMD("nscan:{}".format(numScanVal))

            
            # # Assign 2 triggerPulseWidthMain:
            # triggerPulseWidthMainVal = 90
            self.PyArduinoCMD("mnpt:{}".format(triggerPulseWidthMainVal))

        except:
            print("Error: something wrong when assign values to Arduino")
            self.textBrowser.append("Error: something wrong when assign values to Arduino")
    def start_power_meter(self):
    # Use instance attributes to store the time and power values
        self.time_value = None
        self.power_value = None

    # Set wavelength in nm from the line edit widget
        try:
            wavelength = c_double(488)
            self.tlPM.setWavelength(wavelength)
        # wavelength = float(self.line_wavelength.text()) # get the text value from the line edit and convert it to float
        # self.tlPM.setWavelength(c_double(wavelength)) # set the wavelength
        except:
            print('Error: Invalid wavelength value.')
        # Add your code here to display the message in the text box
            return

    # Enable auto-range mode.
    # 0 -> auto-range disabled
    # 1 -> auto-range enabled
        try:
            self.tlPM.setPowerAutoRange(c_int16(1))
        except:
            print('Error: Failed to set auto-range mode.')
        # Add your code here to display the message in the text box
            return

    # Set power unit to Watt.
    # 0 -> Watt
    # 1 -> dBm
        try:
            self.tlPM.setPowerUnit(c_int16(0))
        except:
            print('Error: Failed to set power unit.')
         # Add your code here to display the message in the text box
            return

    
    # Take time and power measurements and save results in a list attribute.
    
        self.time_power_data = [] # create an empty list

        print('Before Power read');
        try:
            for cnt in range(100): # loop for 100 times
            # read the time and power values
                self.time_value = datetime.now()
                power =  c_double()
                self.tlPM.measPower(byref(power))
                self.power_value = power.value
                print('Powermeter Value: '+str(self.power_value));
    
            # Add the time and power values to the list.
                self.time_power_data.append([self.time_value, self.power_value]) 
                time.sleep(0.1);
            
        except Exception as e:
            print('Error: An exception occurred while measuring and recording time and power values.')
        # Add your code here to display the message in the text box
            print(e)
        finally:
            print('Measurement and recording finished.')
        # Add your code here to display the message in the text box
    
        print('After Power read');
        
    def end_power_meter(self):
    # Close the power meter
    # self.tlPM.close()    
    
    # Create a CSV file to save time and power data.
       csv_file = open('time_power_data.csv', 'w', newline='') # open a file with write mode
       csv_writer = csv.writer(csv_file) # create a csv writer object
       csv_writer.writerow(['Time', 'Power']) # write the header row
       for row in self.time_power_data: # loop through the time and power data list
           csv_writer.writerow(row) # write each row to the CSV file
       csv_file.close() # close the CSV file

    # Create a matplotlib figure to plot time and power data.
       plt.figure() # create a figure object
       plt.xlabel('Time') # set the x-axis label
       plt.ylabel('Power (W)') # set the y-axis label
       plt.title('Time and Power Data') # set the title
       plt.grid() # enable grid lines
       times, powers = zip(*self.time_power_data) # unzip the time and power data list into two lists
       plt.plot(times, powers, 'b-') # plot a blue line
       plt.gcf().autofmt_xdate() # format the x-axis for date and time

    # Analyze the CSV file and get the average power for each segment that is greater than 0.01 W.
       df = pd.read_csv('time_power_data.csv') # read the CSV file as a pandas dataframe
       df['Segment'] = (df['Power'] > 0.0001).diff().cumsum().fillna(0) # create a new column to label each segment
       df = df[df['Power'] > 0.0001] # filter out the rows that have power less than or equal to 0.01 W
       df_grouped = df.groupby('Segment') # group the dataframe by segment
       avg_powers = df_grouped['Power'].mean().values # get the average power for each segment
       print('Average power for each segment that is greater than 0.0001 W:')
       print(avg_powers)

    # Create a list of labels
       self.pm_labels = [self.label_angle_0, self.label_angle_30, self.label_angle_60, self.label_angle_90, self.label_angle_120, self.label_angle_150]

# Update the labels with the first six average powers.
       for i in range(min(6, len(avg_powers))):
           mypow = avg_powers[i]
           self.pm_labels[i].setText(f'{mypow * 1000:.2f}') 
     # Define a list of data for each segment, containing the excitation physical angle, excitation polarization angle, and emission angle.
    data = [
         [0.00, 0.00, 0.00],
         [15.00, 30.00, 0.00],
         [30.00, 60.00, 0.00],
         [45.00, 90.00, 0.00],
         [60.00, 120.00, 0.00],
         [165.00, 150.00, 0.00],
         [0.00, 0.00, 45.00],
         [15.00, 30.00, 45.00],
         [30.00, 60.00, 45.00],
         [45.00, 90.00, 45.00],
         [60.00, 120.00, 45.00],
         [165.00, 150.00, 45.00],
         [0.00, 0.00, 90.00],
         [15.00, 30.00, 90.00],
         [30.00, 60.00, 90.00],
         [45.00, 90.00, 90.00],
         [60.00, 120.00, 90.00],
         [165.00, 150.00, 90.00],
         [0.00, 0.00, 135.00],
         [15.00, 30.00, 135.00],
         [30.00, 60.00, 135.00],
         [45.00, 90.00, 135.00],
         [60.00, 120.00, 135.00],
         [165.00, 150.00, 135.00],
         [0.00, 0.00, 0.00],
         [15.00, 30.00, 0.00],
         [30.00, 60.00, 0.00],
         [45.00, 90.00, 0.00],
         [60.00, 120.00, 0.00],
         [165.00, 150.00, 0.00],
         [0.00, 0.00, 45.00],
         [15.00, 30.00, 45.00],
         [30.00, 60.00, 45.00],
         [45.00, 90.00, 45.00],
         [60.00, 120.00, 45.00],
         [165.00, 150.00, 45.00],
         [0.00, 0.00, 90.00],
         [15.00, 30.00, 90.00],
         [30.00, 60.00, 90.00],
         [45.00, 90.00, 90.00],
         [60.00, 120.00, 90.00],
         [165.00, 150.00, 90.00],
         [0.00, 0.00, 135.00],
         [15.00, 30.00, 135.00],
         [30.00, 60.00, 135.00],
         [45.00, 90.00, 135.00],
         [60.00, 120.00, 135.00],
         [165.00, 150.00, 135.00]
         ]
     # Import the modules for the file dialog and the os


# Define a function to create a log file
    def create_log_file(self):
    # Ask the user to select a save location and enter a file name for the log file.
        save_location = QtGui.QFileDialog.getExistingDirectory(self, 'Please select a save location for the log file')
        file_name = QtGui.QFileDialog.getSaveFileName(self, 'Please enter a file name for the log file', filter='Text files (*.txt)')

    # Open the log file with write mode using os.path.join.
        log_file = open(os.path.join(save_location, file_name), 'w')

    # Write your header in log file
        log_file.write(f'laser wavelength in nm: {self.line_wave.text()}\n')
        log_file.write(f'full excitation power in mW: {self.line_fullpower.text()}\n')
        log_file.write(f'optical density of filter: {self.line_od.text()}\n')
        log_file.write(f'excitation power after filter: {self.line_powerfilter.text()}\n')
        log_file.write(f'em correction modulation depth: {self.line_md.text()}\n')
        log_file.write(f'objective: {self.line_obj.text()}\n')
        log_file.write(f'NA: {self.line_na.text()}\n')
        log_file.write(f'real gain: {self.line_gain.text()}\n')
        log_file.write(f'phase offset in deg: {self.line_offset.text()}\n')
        log_file.write(f'em correction phase: {self.line_phase.text()}\n')
        log_file.write(f'user notes:\n {self.text_usernote.Text()}\n')
        log_file.write('END-OF-HEADER\n')

    # Write the original header to the log file.
        log_file.write('Frame\tExcitation Physical Angle\tExcitation Polarization Angle\tExcitation Power [A.U.]'
                   '\tEmission Angle\n')

    # Initialize a list of average powers from the labels.
        avg_powers = []
        for i in range(6):
            avg_powers.append(float(self.pm_labels[i].text().split()[0]))

    # Initialize a counter for the average power index.
        power_index = 0

    # Loop through 48 frames and write each row to the log file.
        for frame in range(48):
        # Get the excitation physical angle, excitation polarization angle, and emission angle from the data list.
            excitation_physical_angle = self.data[frame][0]
            excitation_polarization_angle = self.data[frame][1]
            emission_angle = self.data[frame][2]

        # Get the average power from the avg_powers list using the power_index.
            average_power = avg_powers[power_index]

        # Write the frame, angles, and power to the log file, separated by tabs.
        log_file.write(f'{frame:.2f}\t{excitation_physical_angle:.2f}\t{excitation_polarization_angle:.2f}\t'
                       f'{average_power:.2f}\t{emission_angle:.2f}\n')

        # Increment the power_index by 1 and reset it to 0 if it reaches 6.
        power_index += 1
        if power_index == 6:
            power_index = 0

    # Close the log file.
        log_file.close()

    # Print a message to indicate that the log file has been created successfully.
        print(f'The log file {file_name} has been created and saved at {save_location}.')
        self.textBrowser.append(f'The log file {file_name} has been created and saved at {save_location}.')


# Define a function to execute the PyArduinoCMD command
    def PyArduinoCMD_acqm(self):
    # Set the text of the label to "Start Acquisition!"
        # self.myLabel0Text.setText("Start Acquisition!")
        print("CNSL: PyArduinoCMD_acqm")
    
    # Print the message "Start Acquisition!" to the text box
        self.textBrowser.append("Start Acquisition!")
    
    # Action:
    # PyArduinoCMD("acqm")
    
    # Step 1. Initialize the LC to cycle mode:
    #Send command "cyclp:1" to set LC into cycle mode
    #Description: Tells the controller to cycle through all valid states (7 states corresponding to 6 polarization angles and a NULL state of 0V). State change occurs only when a trigger pulse is detected on the controller’s trigger input. "1" in the command starts cycling, while "0" stops cycling.
    # print("Return from LC:", PyLCCMD("cyclp:1"))
        self.PyLCCMD("cyclp:1")
    
    #Send command "cycm:?" for checking current mode of LC:
    #Description: Queries the current cycling mode of the controller. Result indicates command being executed. 1 = constant state; 2 = cyc; 3 = cycl; 4 = cycp; 5 = cyclp; 6 =rand. “cycm:5” will be returned if everything is correct.
    # print("Return from LC:", PyLCCMD("cycm:?"))
        LCCycmStat = self.PyLCCMD("cycm:?")

        if LCCycmStat=="cycm:5":
            print("Initialized the LC controller into trigger pulse cycle mode.")
            self.textBrowser.append("Initialized the LC controller into trigger pulse cycle mode.")
        
            self.PyArduinoCMD("acqm", if_return=False, nosync=True)
        # Step 2. Arduino start triggering: 
            print('Will start Power read');
            pm_record = self.start_power_meter()
            arduinoDataPacket_list = self.readArduino()
        
            self.end_power_meter(pm_record, self.pm_labels)
            self.create_log_file()
        # Print the message "Acquisition is done!" to the text box
            self.textBrowser.append("Acquisition is done!")
            print("Acquisition is done!")
        # Set the text of the label to "Acquisition is done!"
            #self.myLabel0Text.setText("Acquisition is done!")
        
        elif demo_flag == True:
        # Set the text of the label to "[Demo]Start Acquisition!"
            # self.myLabel0Text.setText("[Demo]Start Acquisition!")
            print("[Demo]CNSL: PyArduinoCMD_acqm")
        # Print the message "[Demo]Start Acquisition!" to the text box
            self.textBrowser.append("[Demo]Start Acquisition!")
            print("!!!NOTICE: This is a Demo, NOT a real acquisition!!!")
        # Print the message "!!!NOTICE: This is a Demo, NOT a real acquisition!!!" to the text box
            self.textBrowser.append("!!!NOTICE: This is a Demo, NOT a real acquisition!!!")
        
        # Step 2. Arduino start triggering: 
            self.PyArduinoCMD("acqm")
        # Print the message "[Demo]Acquisition is done!" and "!!!NOTICE: This is a Demo, NOT a real acquisition!!!" to the text box
            self.textBrowser.append("[Demo]Acquisition is done!", "\n","!!!NOTICE: This is a Demo, NOT a real acquisition!!!")
            print("[Demo]Acquisition is done!", "\n","!!!NOTICE: This is a Demo, NOT a real acquisition!!!")
        # Set the text of the label to "[Demo]Acquisition is done!"
            # self.myLabel0Text.setText("[Demo]Acquisition is done!")
    
        else:
            print("Error occurs! Do NOT run 2D POLIM UNLESS the LC controller is correctly initialized.")
        # Print the message "Error occurs! Do NOT run 2D POLIM UNLESS the LC controller is correctly initialized." to the text box
            self.textBrowser.append("Error occurs! Do NOT run 2D POLIM UNLESS the LC controller is correctly initialized.")
    
    def buttonStateRefresh(self):
    
        global demo_flag, laserConnect_flag, arduinoConnect_flag, LCPortCheck_flag
    # 1. Laser related buttons: when laserConnect_flag == True
        if laserConnect_flag == True:
            self.Button_execute.setEnabled(True)
            self.Button_on.setEnabled(True)
            self.Button_off.setEnabled(True)
        else: 
            self.Button_execute.setEnabled(False)
            self.Button_on.setEnabled(False)
            self.Button_off.setEnabled(False)
        
    # 2. Arduino related buttons: when arduinoConnect_flag == True
        if arduinoConnect_flag == True:
            self.Button_read.setEnabled(True) # set button state to "Enabled" when device is connected
            self.Button_set.setEnabled(True)
        else: 
            self.Button_read.setEnabled(False) # set button state to "Disabled" when device is connected
            self.Button_set.setEnabled(False)
        
    # 3. Acquisition buttons: when arduinoConnect_flag == True and LCPortCheck_flag == True and connect_power_meter() == True
        if arduinoConnect_flag == True and LCPortCheck_flag == True and self.connect_power_meter() == True:
            self.Button_start.setEnabled(True) # set button state to "Enabled" when device is connected
        # self.startInfiniteMode_btn.setEnabled(True)
        # self.stopInfiniteMode_btn.setEnabled(True)
        else:
            self.Button_start.setEnabled(False) # set button state to "Disabled" when device is connected
        # self.startInfiniteMode_btn.setEnabled(False)
        # self.stopInfiniteMode_btn.setEnabled(False)
        # self.buttonStateRefresh()




     





# import images_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
